// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.huazhuo.shop.web;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;

import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.huazhuo.shop.city.Cities;
import com.huazhuo.shop.city.Provinces;
import com.huazhuo.shop.domain.ProductBrand;
import com.huazhuo.shop.domain.ShopFreightTemplate;
import com.huazhuo.shop.domain.ShoppingCategories;
import com.huazhuo.shop.domain.ShoppingProductMark;
import com.huazhuo.shop.domain.ShoppingProductPictures;
import com.huazhuo.shop.domain.ShoppingProducts;
import com.huazhuo.shop.domain.ShoppingProductsParameter;
import com.huazhuo.shop.domain.ShoppingProductsSpec;

privileged aspect ShoppingProductsController_Roo_Controller {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ShoppingProductsController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ShoppingProducts shoppingProducts = ShoppingProducts.findShoppingProducts(id);
        shoppingProducts.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/shoppingproductses";
    }
    
    void ShoppingProductsController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("shoppingProducts_createdat_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("shoppingProducts_updatedat_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("shoppingProducts_onsaledate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("shoppingProducts_reviewdate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void ShoppingProductsController.populateEditForm(Model uiModel, ShoppingProducts shoppingProducts) {
        uiModel.addAttribute("shoppingProducts", shoppingProducts);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("citieses", Cities.findAllCitieses());
        uiModel.addAttribute("provinceses", Provinces.findAllProvinceses());
        uiModel.addAttribute("productbrands", ProductBrand.findAllProductBrands());
        uiModel.addAttribute("shopfreighttemplates", ShopFreightTemplate.findAllShopFreightTemplates());
        uiModel.addAttribute("shoppingcategorieses", ShoppingCategories.findAllShoppingCategorieses());
        uiModel.addAttribute("shoppingproductmarks", ShoppingProductMark.findAllShoppingProductMarks());
        uiModel.addAttribute("shoppingproductpictureses", ShoppingProductPictures.findAllShoppingProductPictureses());
        uiModel.addAttribute("shoppingproductsparameters", ShoppingProductsParameter.findAllShoppingProductsParameters());
        uiModel.addAttribute("shoppingproductsspecs", ShoppingProductsSpec.findAllShoppingProductsSpecs());
    }
    
    String ShoppingProductsController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
