// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.huazhuo.shop.web;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.huazhuo.shop.city.Cities;
import com.huazhuo.shop.domain.Company;
import com.huazhuo.shop.domain.Shops;

privileged aspect ShopsController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ShopsController.create(@Valid Shops shops, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, shops);
            return "shopses/create";
        }
        uiModel.asMap().clear();
        shops.persist();
        return "redirect:/shopses/" + encodeUrlPathSegment(shops.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ShopsController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Shops());
        return "shopses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ShopsController.show(@PathVariable("id") Integer id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("shops", Shops.findShops(id));
        uiModel.addAttribute("itemId", id);
        return "shopses/show";
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ShopsController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, Shops.findShops(id));
        return "shopses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ShopsController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Shops shops = Shops.findShops(id);
        shops.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/shopses";
    }
    
    void ShopsController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("shops_createdat_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("shops_updatedat_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void ShopsController.populateEditForm(Model uiModel, Shops shops) {
        uiModel.addAttribute("shops", shops);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("citieses", Cities.findAllCitieses());
        uiModel.addAttribute("companys", Company.findAllCompanys());
    }
    
    String ShopsController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
