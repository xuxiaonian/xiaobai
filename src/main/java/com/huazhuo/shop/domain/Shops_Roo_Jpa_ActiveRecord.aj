// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.huazhuo.shop.domain;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

privileged aspect Shops_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Shops.entityManager;
    
    public static final EntityManager Shops.entityManager() {
        EntityManager em = new Shops().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Shops.countShopses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Shops o", Long.class).getSingleResult();
    }
    
    public static List<Shops> Shops.findAllShopses() {
        return entityManager().createQuery("SELECT o FROM Shops o", Shops.class).getResultList();
    }
    
    public static Shops Shops.findShops(Integer id) {
        if (id == null) return null;
        return entityManager().find(Shops.class, id);
    }
    
    @Transactional
    public void Shops.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Shops.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Shops attached = Shops.findShops(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Shops.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Shops.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Shops Shops.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Shops merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
